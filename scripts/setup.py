"""
Script c√†i ƒë·∫∑t v√† thi·∫øt l·∫≠p h·ªá th·ªëng
T·ª± ƒë·ªông ph√°t hi·ªán GPU v√† c√†i ƒë·∫∑t PyTorch ph√π h·ª£p
"""

import os
import sys
import subprocess
import platform


def detect_nvidia_gpu():
    """Ph√°t hi·ªán GPU NVIDIA"""
    try:
        result = subprocess.run(
            ['nvidia-smi'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            timeout=5
        )
        return result.returncode == 0
    except:
        return False


def get_cuda_version():
    """L·∫•y phi√™n b·∫£n CUDA"""
    try:
        result = subprocess.run(
            ['nvidia-smi'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            timeout=5
        )
        if result.returncode == 0:
            import re
            match = re.search(r'CUDA Version:\s*(\d+\.\d+)', result.stdout)
            if match:
                return match.group(1)
        return None
    except:
        return None


def install_pytorch_smart():
    """C√†i ƒë·∫∑t PyTorch th√¥ng minh theo GPU"""
    print("\n" + "="*60)
    print("C√ÄI ƒê·∫∂T PYTORCH")
    print("="*60)

    # Ki·ªÉm tra PyTorch ƒë√£ c√≥ ch∆∞a
    try:
        import torch
        print(f"‚úì PyTorch ƒë√£ c√≥: {torch.__version__}")
        if torch.cuda.is_available():
            print(f"‚úì CUDA ƒë√£ k√≠ch ho·∫°t: {torch.cuda.get_device_name(0)}")
            return True
        else:
            print("‚ö† PyTorch hi·ªán t·∫°i ch·ªâ h·ªó tr·ª£ CPU")
            if detect_nvidia_gpu():
                response = input("\nüí° C√≥ GPU nh∆∞ng kh√¥ng d√πng CUDA. C√†i l·∫°i? (y/n): ").lower()
                if response != 'y':
                    return True
                subprocess.check_call([
                    sys.executable, "-m", "pip", "uninstall", "torch", "torchvision", "-y"
                ])
            else:
                return True
    except ImportError:
        print("PyTorch ch∆∞a ƒë∆∞·ª£c c√†i")

    # X√°c ƒë·ªãnh phi√™n b·∫£n c·∫ßn c√†i
    has_gpu = detect_nvidia_gpu()

    if has_gpu:
        cuda_ver = get_cuda_version()
        print(f"\nüöÄ Ph√°t hi·ªán GPU NVIDIA (CUDA {cuda_ver or 'unknown'})")

        # Ch·ªçn CUDA version
        if cuda_ver:
            cuda_major = int(cuda_ver.split('.')[0])
            if cuda_major >= 12:
                index_url = "https://download.pytorch.org/whl/cu121"
                print("   ‚Üí C√†i PyTorch CUDA 12.1")
            elif cuda_major == 11:
                index_url = "https://download.pytorch.org/whl/cu118"
                print("   ‚Üí C√†i PyTorch CUDA 11.8")
            else:
                index_url = None
                print("   ‚Üí CUDA qu√° c≈©, c√†i CPU")
        else:
            index_url = "https://download.pytorch.org/whl/cu118"
            print("   ‚Üí C√†i PyTorch CUDA 11.8 (m·∫∑c ƒë·ªãnh)")

        try:
            if index_url:
                subprocess.check_call([
                    sys.executable, "-m", "pip", "install",
                    "torch", "torchvision", "--index-url", index_url
                ])
            else:
                subprocess.check_call([
                    sys.executable, "-m", "pip", "install",
                    "torch>=2.0.0", "torchvision>=0.15.0"
                ])
            print("‚úì C√†i PyTorch th√†nh c√¥ng")
            return True
        except:
            print("‚úó L·ªói c√†i CUDA, th·ª≠ CPU...")
            try:
                subprocess.check_call([
                    sys.executable, "-m", "pip", "install",
                    "torch>=2.0.0", "torchvision>=0.15.0"
                ])
                return True
            except:
                return False
    else:
        print("\nüíª Kh√¥ng c√≥ GPU, c√†i PyTorch CPU")
        try:
            subprocess.check_call([
                sys.executable, "-m", "pip", "install",
                "torch>=2.0.0", "torchvision>=0.15.0"
            ])
            print("‚úì C√†i PyTorch CPU th√†nh c√¥ng")
            return True
        except:
            return False


def install_other_packages():
    """C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán kh√°c"""
    print("\n" + "="*60)
    print("C√ÄI ƒê·∫∂T C√ÅC TH∆Ø VI·ªÜN KH√ÅC")
    print("="*60)

    try:
        # N√¢ng c·∫•p pip
        print("‚Üí N√¢ng c·∫•p pip...")
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "--upgrade", "pip"
        ], stdout=subprocess.DEVNULL)

        # C√†i numpy
        print("‚Üí C√†i numpy...")
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "numpy==1.24.3"
        ], stdout=subprocess.DEVNULL)

        # C√†i c√°c th∆∞ vi·ªán kh√°c
        packages = [
            "opencv-python>=4.8.0",
            "matplotlib>=3.7.0",
            "pillow>=10.0.0,<12.0",
            "pandas>=2.0.0",
            "scikit-learn>=1.3.0",
            "albumentations>=1.3.0",
            "PyQt6>=6.5.0",
            "ultralytics>=8.0.0"
        ]

        for pkg in packages:
            print(f"‚Üí C√†i {pkg.split('>=')[0]}...")
            try:
                subprocess.check_call(
                    [sys.executable, "-m", "pip", "install", pkg],
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL
                )
            except:
                print(f"  ‚ö† L·ªói c√†i {pkg}")

        print("‚úì C√†i ƒë·∫∑t ho√†n t·∫•t")
        return True
    except Exception as e:
        print(f"‚úó L·ªói: {e}")
        return False


def download_yolo_model():
    """T·∫£i m√¥ h√¨nh YOLOv8"""
    print("\n" + "="*60)
    print("T·∫¢I M√î H√åNH YOLOv8")
    print("="*60)

    try:
        from ultralytics import YOLO
        import numpy as np

        print("‚Üí T·∫£i YOLOv8n...")
        model = YOLO("yolov8n.pt")

        print("‚Üí Test m√¥ h√¨nh...")
        test_img = np.zeros((640, 640, 3), dtype=np.uint8)
        _ = model(test_img, verbose=False)

        print("‚úì M√¥ h√¨nh ho·∫°t ƒë·ªông t·ªët")
        return True
    except Exception as e:
        print(f"‚úó L·ªói: {e}")
        return False


def verify_installation():
    """X√°c minh c√†i ƒë·∫∑t"""
    print("\n" + "="*60)
    print("X√ÅC MINH C√ÄI ƒê·∫∂T")
    print("="*60)

    try:
        import torch
        print(f"‚úì PyTorch: {torch.__version__}")

        if torch.cuda.is_available():
            print(f"‚úì GPU: {torch.cuda.get_device_name(0)}")
            print(f"‚úì VRAM: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
        else:
            print("‚Ñπ Ch·∫°y tr√™n CPU")

        import cv2
        print(f"‚úì OpenCV: {cv2.__version__}")

        from ultralytics import YOLO
        print("‚úì Ultralytics: OK")

        return True
    except Exception as e:
        print(f"‚ö† L·ªói: {e}")
        return False


def create_directories():
    """T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt"""
    dirs = ["data", "output", "logs", "models"]
    for d in dirs:
        os.makedirs(d, exist_ok=True)


def main():
    """H√†m ch√≠nh"""
    print("\n" + "="*60)
    print("   THI·∫æT L·∫¨P H·ªÜ TH·ªêNG NH·∫¨N D·∫†NG NG∆Ø·ªúI - YOLOv8")
    print("="*60)

    # Hi·ªÉn th·ªã th√¥ng tin h·ªá th·ªëng
    print(f"\nüìã H·ªá ƒëi·ªÅu h√†nh: {platform.system()} {platform.release()}")
    print(f"üìã Python: {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    print(f"üìã GPU NVIDIA: {'C√≥' if detect_nvidia_gpu() else 'Kh√¥ng'}")

    # Ki·ªÉm tra Python version
    if sys.version_info < (3, 8):
        print("\n‚ùå C·∫ßn Python 3.8 tr·ªü l√™n")
        return

    # B∆∞·ªõc 1: C√†i PyTorch
    if not install_pytorch_smart():
        print("\n‚ùå Kh√¥ng th·ªÉ c√†i PyTorch")
        return

    # B∆∞·ªõc 2: C√†i th∆∞ vi·ªán kh√°c
    if not install_other_packages():
        print("\n‚ùå Kh√¥ng th·ªÉ c√†i th∆∞ vi·ªán")
        return

    # B∆∞·ªõc 3: T·∫°o th∆∞ m·ª•c
    create_directories()

    # B∆∞·ªõc 4: T·∫£i YOLO
    if not download_yolo_model():
        print("\n‚ö† Kh√¥ng th·ªÉ t·∫£i YOLO (c√≥ th·ªÉ b·ªè qua)")

    # B∆∞·ªõc 5: X√°c minh
    verify_installation()

    # Ho√†n th√†nh
    print("\n" + "="*60)
    print("   ‚úÖ C√ÄI ƒê·∫∂T HO√ÄN T·∫§T!")
    print("="*60)
    print("\nüìö Ch·∫°y ·ª©ng d·ª•ng:")
    print("   python scripts/run_gui.py")
    print("\n" + "="*60)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö† ƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"\n\n‚ùå L·ªói: {e}")
        print("üí° Th·ª≠ ch·∫°y: python scripts/fix_installation.py")
