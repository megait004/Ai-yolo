"""
Script s·ª≠a l·ªói xung ƒë·ªôt numpy c·ª• th·ªÉ
"""

import subprocess
import sys
import os


def fix_numpy_conflict():
    """
    S·ª≠a l·ªói xung ƒë·ªôt numpy
    """
    print("=== S·ª¨A L·ªñI XUNG ƒê·ªòT NUMPY ===")
    print("L·ªói: numpy.dtype size changed - xung ƒë·ªôt phi√™n b·∫£n")
    print()

    try:
        # B∆∞·ªõc 1: G·ª° c√†i ƒë·∫∑t t·∫•t c·∫£ th∆∞ vi·ªán li√™n quan ƒë·∫øn numpy
        print("1. G·ª° c√†i ƒë·∫∑t c√°c th∆∞ vi·ªán xung ƒë·ªôt...")
        packages_to_remove = [
            "numpy", "opencv-python", "opencv-python-headless",
            "albumentations", "albucore", "scikit-image"
        ]

        for package in packages_to_remove:
            try:
                subprocess.check_call([
                    sys.executable, "-m", "pip", "uninstall", package, "-y"
                ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                print(f"   ‚úì ƒê√£ g·ª° {package}")
            except:
                print(f"   ‚ö† {package} kh√¥ng c√≥ ho·∫∑c ƒë√£ ƒë∆∞·ª£c g·ª°")

        # B∆∞·ªõc 2: X√≥a cache pip
        print("\n2. X√≥a cache pip...")
        subprocess.check_call([sys.executable, "-m", "pip", "cache", "purge"])
        print("   ‚úì ƒê√£ x√≥a cache")

        # B∆∞·ªõc 3: C√†i ƒë·∫∑t numpy phi√™n b·∫£n t∆∞∆°ng th√≠ch
        print("\n3. C√†i ƒë·∫∑t numpy phi√™n b·∫£n t∆∞∆°ng th√≠ch...")
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "numpy>=1.24.4,<2.0"
        ])
        print("   ‚úì ƒê√£ c√†i ƒë·∫∑t numpy")

        # B∆∞·ªõc 4: C√†i ƒë·∫∑t opencv
        print("\n4. C√†i ƒë·∫∑t opencv...")
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "opencv-python>=4.8.0"
        ])
        print("   ‚úì ƒê√£ c√†i ƒë·∫∑t opencv")

        # B∆∞·ªõc 5: C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán c√≤n l·∫°i
        print("\n5. C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán c√≤n l·∫°i...")
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ])
        print("   ‚úì ƒê√£ c√†i ƒë·∫∑t t·∫•t c·∫£ th∆∞ vi·ªán")

        # B∆∞·ªõc 6: Test import
        print("\n6. Test import...")
        test_imports()

        return True

    except Exception as e:
        print(f"\n‚úó L·ªói: {e}")
        return False


def test_imports():
    """
    Test import c√°c th∆∞ vi·ªán
    """
    test_modules = [
        ("numpy", "np"),
        ("cv2", "cv2"),
        ("torch", "torch"),
        ("ultralytics", "YOLO")
    ]

    success_count = 0
    for module_name, import_name in test_modules:
        try:
            exec(f"import {module_name} as {import_name}")
            print(f"   ‚úì {module_name} import th√†nh c√¥ng")
            success_count += 1
        except Exception as e:
            print(f"   ‚úó {module_name} import th·∫•t b·∫°i: {e}")

    if success_count == len(test_modules):
        print("\nüéâ S·ª¨A L·ªñI TH√ÄNH C√îNG!")
        print("T·∫•t c·∫£ th∆∞ vi·ªán ƒë√£ ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.")
    else:
        print(f"\n‚ö† Ch·ªâ {success_count}/{len(test_modules)} th∆∞ vi·ªán ho·∫°t ƒë·ªông.")


def main():
    """
    H√†m main
    """
    print("=== S·ª¨A L·ªñI XUNG ƒê·ªòT NUMPY ===")
    print("Phi√™n b·∫£n: 1.0")
    print()

    if fix_numpy_conflict():
        print("\n‚úÖ Ho√†n th√†nh! B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ch·∫°y:")
        print("   python setup.py")
        print("   python main.py")
    else:
        print("\n‚ùå C√≥ l·ªói trong qu√° tr√¨nh s·ª≠a l·ªói.")
        print("Vui l√≤ng th·ª≠ ph∆∞∆°ng ph√°p th·ªß c√¥ng trong TROUBLESHOOTING.md")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nQu√° tr√¨nh b·ªã gi√°n ƒëo·∫°n.")
    except Exception as e:
        print(f"\nL·ªói kh√¥ng mong mu·ªën: {e}")
