"""
Script s·ª≠a l·ªói c√†i ƒë·∫∑t v√† xung ƒë·ªôt th∆∞ vi·ªán
"""

import subprocess
import sys
import os


def uninstall_conflicting_packages():
    """
    G·ª° c√†i ƒë·∫∑t c√°c package c√≥ th·ªÉ g√¢y xung ƒë·ªôt
    """
    print("=== G·ª† C√ÄI ƒê·∫∂T C√ÅC PACKAGE XUNG ƒê·ªòT ===")

    packages_to_uninstall = [
        "numpy",
        "opencv-python",
        "opencv-contrib-python",
        "ultralytics",
        "torch",
        "torchvision",
        "matplotlib",
        "pillow",
        "pandas",
        "scikit-learn",
        "albumentations"
    ]

    for package in packages_to_uninstall:
        try:
            print(f"ƒêang g·ª° c√†i ƒë·∫∑t {package}...")
            subprocess.check_call([
                sys.executable, "-m", "pip", "uninstall", package, "-y"
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print(f"‚úì ƒê√£ g·ª° c√†i ƒë·∫∑t {package}")
        except subprocess.CalledProcessError:
            print(f"‚ö† {package} kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c ƒë√£ ƒë∆∞·ª£c g·ª°")
        except Exception as e:
            print(f"‚úó L·ªói khi g·ª° {package}: {e}")


def install_packages_step_by_step():
    """
    C√†i ƒë·∫∑t t·ª´ng package m·ªôt c√°ch tu·∫ßn t·ª±
    """
    print("\n=== C√ÄI ƒê·∫∂T T·ª™NG PACKAGE ===")

    # Th·ª© t·ª± c√†i ƒë·∫∑t quan tr·ªçng
    packages = [
        ("numpy", "1.24.3"),
        ("pillow", ">=10.0.0"),
        ("matplotlib", ">=3.7.0"),
        ("pandas", ">=2.0.0"),
        ("opencv-python", ">=4.8.0"),
        ("torch", ">=2.0.0"),
        ("torchvision", ">=0.15.0"),
        ("scikit-learn", ">=1.3.0"),
        ("albumentations", ">=1.3.0"),
        ("ultralytics", ">=8.0.0")
    ]

    for package, version in packages:
        try:
            print(f"ƒêang c√†i ƒë·∫∑t {package} {version}...")
            if version.startswith(">="):
                subprocess.check_call([
                    sys.executable, "-m", "pip", "install", f"{package}{version}"
                ])
            else:
                subprocess.check_call([
                    sys.executable, "-m", "pip", "install", f"{package}=={version}"
                ])
            print(f"‚úì ƒê√£ c√†i ƒë·∫∑t {package}")
        except subprocess.CalledProcessError as e:
            print(f"‚úó L·ªói khi c√†i ƒë·∫∑t {package}: {e}")
            return False

    return True


def clear_pip_cache():
    """
    X√≥a cache pip
    """
    print("\n=== X√ìA CACHE PIP ===")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "cache", "purge"])
        print("‚úì ƒê√£ x√≥a cache pip")
    except Exception as e:
        print(f"‚ö† Kh√¥ng th·ªÉ x√≥a cache: {e}")


def upgrade_pip():
    """
    N√¢ng c·∫•p pip
    """
    print("\n=== N√ÇNG C·∫§P PIP ===")
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "--upgrade", "pip"
        ])
        print("‚úì ƒê√£ n√¢ng c·∫•p pip")
    except Exception as e:
        print(f"‚ö† Kh√¥ng th·ªÉ n√¢ng c·∫•p pip: {e}")


def test_imports():
    """
    Test import c√°c th∆∞ vi·ªán
    """
    print("\n=== TEST IMPORT TH∆Ø VI·ªÜN ===")

    test_modules = [
        ("numpy", "np"),
        ("cv2", "cv2"),
        ("torch", "torch"),
        ("matplotlib.pyplot", "plt"),
        ("pandas", "pd"),
        ("ultralytics", "YOLO")
    ]

    success_count = 0
    for module_name, import_name in test_modules:
        try:
            exec(f"import {module_name} as {import_name}")
            print(f"‚úì {module_name} import th√†nh c√¥ng")
            success_count += 1
        except Exception as e:
            print(f"‚úó {module_name} import th·∫•t b·∫°i: {e}")

    print(f"\nK·∫øt qu·∫£: {success_count}/{len(test_modules)} th∆∞ vi·ªán import th√†nh c√¥ng")
    return success_count == len(test_modules)


def main():
    """
    H√†m main ƒë·ªÉ s·ª≠a l·ªói c√†i ƒë·∫∑t
    """
    print("=== S·ª¨A L·ªñI C√ÄI ƒê·∫∂T H·ªÜ TH·ªêNG ===")
    print("L·ªói: numpy.dtype size changed - xung ƒë·ªôt phi√™n b·∫£n th∆∞ vi·ªán")
    print()

    # B∆∞·ªõc 1: N√¢ng c·∫•p pip
    upgrade_pip()

    # B∆∞·ªõc 2: X√≥a cache
    clear_pip_cache()

    # B∆∞·ªõc 3: G·ª° c√†i ƒë·∫∑t c√°c package xung ƒë·ªôt
    uninstall_conflicting_packages()

    # B∆∞·ªõc 4: C√†i ƒë·∫∑t l·∫°i t·ª´ng package
    if install_packages_step_by_step():
        print("\n=== KI·ªÇM TRA K·∫æT QU·∫¢ ===")
        if test_imports():
            print("\nüéâ S·ª¨A L·ªñI TH√ÄNH C√îNG!")
            print("T·∫•t c·∫£ th∆∞ vi·ªán ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.")
            print("\nB√¢y gi·ªù b·∫°n c√≥ th·ªÉ ch·∫°y:")
            print("  python setup.py")
            print("  python main.py")
        else:
            print("\n‚ö† M·ªôt s·ªë th∆∞ vi·ªán v·∫´n c√≥ v·∫•n ƒë·ªÅ.")
            print("Vui l√≤ng th·ª≠ c√†i ƒë·∫∑t th·ªß c√¥ng t·ª´ng th∆∞ vi·ªán.")
    else:
        print("\n‚úó C√≥ l·ªói trong qu√° tr√¨nh c√†i ƒë·∫∑t.")
        print("Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i.")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nQu√° tr√¨nh s·ª≠a l·ªói b·ªã gi√°n ƒëo·∫°n.")
    except Exception as e:
        print(f"\nL·ªói kh√¥ng mong mu·ªën: {e}")
