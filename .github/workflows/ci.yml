name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

jobs:
    test:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: [3.8, 3.9, '3.10', '3.11']

        steps:
            - uses: actions/checkout@v3

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Cache pip dependencies
              uses: actions/cache@v3
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install pytest pytest-cov flake8 black isort

            - name: Lint with flake8
              run: |
                  flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
                  flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

            - name: Check code formatting with black
              run: |
                  black --check src tests

            - name: Check import sorting with isort
              run: |
                  isort --check-only src tests

            - name: Run unit tests
              run: |
                  pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.xml
                  flags: unittests
                  name: codecov-umbrella

    integration-test:
        runs-on: ubuntu-latest
        needs: test

        steps:
            - uses: actions/checkout@v3

            - name: Set up Python 3.10
              uses: actions/setup-python@v4
              with:
                  python-version: '3.10'

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install pytest

            - name: Run integration tests
              run: |
                  pytest tests/integration/ -v

    build:
        runs-on: ubuntu-latest
        needs: [test, integration-test]

        steps:
            - uses: actions/checkout@v3

            - name: Set up Python 3.10
              uses: actions/setup-python@v4
              with:
                  python-version: '3.10'

            - name: Install build dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install build twine

            - name: Build package
              run: |
                  python -m build

            - name: Check package
              run: |
                  twine check dist/*

            - name: Upload build artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: dist
                  path: dist/

    security-scan:
        runs-on: ubuntu-latest
        needs: test

        steps:
            - uses: actions/checkout@v3

            - name: Set up Python 3.10
              uses: actions/setup-python@v4
              with:
                  python-version: '3.10'

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install bandit safety

            - name: Run security scan with bandit
              run: |
                  bandit -r src/ -f json -o bandit-report.json || true

            - name: Check for known security vulnerabilities
              run: |
                  safety check --json --output safety-report.json || true

            - name: Upload security reports
              uses: actions/upload-artifact@v3
              with:
                  name: security-reports
                  path: |
                      bandit-report.json
                      safety-report.json

    deploy:
        runs-on: ubuntu-latest
        needs: [build, security-scan]
        if: github.ref == 'refs/heads/main'

        steps:
            - uses: actions/checkout@v3

            - name: Download build artifacts
              uses: actions/download-artifact@v3
              with:
                  name: dist
                  path: dist/

            - name: Deploy to PyPI (if configured)
              if: false # Set to true when ready to deploy
              run: |
                  echo "Deploy to PyPI would happen here"
                  # twine upload dist/* --repository-url https://upload.pypi.org/legacy/ --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }}
